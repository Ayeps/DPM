Case 1:
Transition from 'Idle' to 'Sleep' after tau 'timeout' has been reached
       reason: SQ.count() == 0
       action: pick a tau timeout duration
    direction: idle2sleep
TT in Idle = Timeout + Transition time
(Idle,0)---- TT -----(Sleep,0)
Here we don't need to worry about a times as we are already keeeping one to match Timeout chosen



Case 2:
Transition from 'Idle' to 'Active' before tau 'timeout' has been reached
       reason: SQ.count() > 0
       action: pick a tau timeout duration
    direction: idle2active
(Idle,0)---- TTshort -----(Active,Q)
Here as well we were keeping a counter so we are good and penalizing (I,0) for the time in (I,0)


Case 3:
Transitioning from 'Idle' to 'Sleep' after tau 'timeout' has been reached and request arrived while in transition.
Select an N-Policy
       reason: SQ.count() > 0
       action: pick N-Policy
    direction: sleep2active

Keep a counter for how much time you are in (S,Q1), if the state is changed (S,Q2), (S,Q1) is power penalized for the duration it was in (S,Q2)



Case 4:
Transition from 'Sleep' to 'Active' after an N-Policy has been satisfied.
Select an N-Policy
       reason: SQ.count() > 0 and N-Policy is not satisfied
       action: pick N-Policy
    direction: sleep2active
(Sleep,Q) is penalized for the complete duration it was in (Sleep,Q) + Transition power penalty




Case 5:
Transition from 'Active' to 'Idle' after an SQ.count() == 0
       reason: SQ.count() == 0
       action: transition
    direction: active2idle




Case 6:
Transition from 'Active' to 'Active' 
       reason: SQ.count() > 0
       action: transition
    direction: active2active



Case 7:
Transition from 'Sleep' to 'Sleep'
       reason: SQ.count() == 0 not under N-Policy not satisfied
       action: transition
    direction: sleep2sleep



